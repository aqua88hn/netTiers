<%--
 * $Id: EntityHelper.cst,v 1.0 2017/01/01 23:35:10 jguenther Exp $
 * Last modified by $Author: jguenther $
 * Last modified at $Date: 2017/01/01 23:35:10 $
 * $Revision: 1.0 $
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="contains a creational factory for entity types." ResponseEncoding="UTF-8"  NoWarn="0108,0618,1572,1573,1574,0162,2002"%>
<%@ Property Name="NameSpace" Type="System.String" Category="Data" Description="The project root Namespace." %>
using System.Runtime.Caching;

namespace <%=NameSpace%>
{
	/// <summary>
    /// Entity Cache provides a caching mechanism for entities on a by entity level.
    /// </summary>
    public static class EntityCache
    {
        private static volatile MemoryCache cacheManager;
        private static string cacheManagerKey = "<%=NameSpace%>.EntityCache";
		private static object syncObject = new object(); 
        
		/// <summary>
        /// Gets the cache manager.
        /// </summary>
        /// <value>The cache manager.</value>		
        public static MemoryCache CacheManager
        {
            get
            {
                if (cacheManager == null)
                    cacheManager = new MemoryCache(CacheManagerKey);
                
                return cacheManager;
             }
        }
        
	
		#region CacheManagerKey
		/// <summary>
	    /// Assigns the Default CacheManagerKey To Be Used.
	    /// </summary>
	    public static string CacheManagerKey
	    {
	        get
	        {
	            return cacheManagerKey;
	        }
	        set
	        {
	            lock(syncObject)
                {
	                cacheManagerKey = value;
                }
	        }
	    }
		#endregion 
		
        #region RemoveItem
        /// <summary>
        /// Removes the item.
        /// </summary>
        /// <param name="id">The id.</param>
		public static void RemoveItem(string id)
        {
            CacheManager.Remove(id);
        }
		#endregion 
	
        #region Flush Objects
		/// <summary>
        /// Flushes the cache manager.
        /// </summary>
        public static void FlushCacheManager()
        {
            CacheManager.Dispose();
            cacheManager = null;
        }

        /// <summary>
        /// Flushes the cache.
        /// </summary>
        public static void FlushCache()
        {
            CacheManager.Dispose();
            cacheManager = null;
        }
        #endregion

        #region AddCache

        /// <summary>
        /// Adds the cache without a policy.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <param name="entity">The entity.</param>
        public static void AddCache(string id, object entity)
        {
            CacheManager.Add(id, entity, null);
        }

        /// <summary>
        /// Adds the cache.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <param name="entity">The entity.</param>
        /// <param name="_cachePolicy">The entity caching policy.</param>
        public static void AddCache(string id, object entity, EntityCachePolicy _cachePolicy)
        {
            CacheManager.Add(id, entity, _cachePolicy);
        }
        #endregion

        #region GetItem
        /// <summary>
        /// Gets the item.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <returns></returns> 
        public static T GetItem<T>(string id) where T : class
        {
            return CacheManager[id] as T;
        }
        #endregion

    }

    /// <summary>
    /// Policy wrapper class
    /// </summary>
    public class EntityCachePolicy : CacheItemPolicy
    {

    }

    /// <summary>
    /// General features directing what the caching method is doing
    /// </summary>
    public enum EntityCacheOptions
    {
        /// <summary>
        /// Just a standard cache retrieval call, apply Policy if provided and the item does not yet exist in cache.
        /// </summary>
        None,
        /// <summary>
        /// Refresh the data in the cache.
        /// </summary>
        UpdateCache,
        /// <summary>
        /// Remove this key from the cache.
        /// </summary>
        RemoveFromCache
    }
}
